@c Tile

The @code{tile}  transformation allows a loop dimension to be segregated into tiles, the execution of which are scheduled by a control loop placed outside the tiled loop. Statements and loops inside the control loop will be executed a tile at a time along the tiled dimension.

@deftypefn {Transform} @code{tile} {} (int @var{stmt}, int @var{level}, int @var{tile_size}, int @var{outer_level} = 1, TileMethod @var{method} = StridedTile, int @var{alignment_offset} = 1, @* int @var{alignment_multiple} = 1)

The loop nest to tile is specified by @var{stmt} and @var{level}. The @var{tile_size} specifies the tile size, a value of 0 indicates no tiling, a value of 1 is similar to loop interchange. The @var{outer_loop} @dots{}

@end deftypefn

@c tile           stmt#
@c                loop level to tile
@c                tile size
@c                  = 0 means no tiling
@c                  = 1 similar to loop interchange
@c                  = d tiling with tile/block size d
@c                tile controlling loop level (default = 1, i.e. outermost loop)
@c                tile controlling loop iteration method
@c                tile boundary alignment offset (default = 0, >= 0)
@c                tile boundary alignment multiple (default = 1, >= 1)
@c align the starting point of the very first tile to be the closest designated  multiples right below (original_lb - offset)

@include examples/tile.texi
