invoke.stdout:s0->s1: C:true(+, 0, 0) C:true(0, 0, 0) C:output(+, 0, 0) C:output(0, 0, 0)
invoke.stdout:s1->s1: C:anti(+, 0, 0) C:output(+, 0, 0)
known.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
known.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
known.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
known.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
loopind.stdout:s0->s0: a:true(0) b:anti(0)
loopind.stdout:s0->s0: a:true(0) b:anti(0)
null.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
null.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
null.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
null.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
quick.stdout:s0->s1: C:true(+, 0, 0) C:true(0, 0, 0) C:output(+, 0, 0) C:output(0, 0, 0)
quick.stdout:s1->s1: C:anti(+, 0, 0) C:output(+, 0, 0)
test01.stdout:s0->s1: C:true(+, 0, 0) C:true(0, 0, 0) C:output(+, 0, 0) C:output(0, 0, 0)
test01.stdout:s1->s1: C:anti(+, 0, 0) C:output(+, 0, 0)
test0.stdout:s0->s1: C:true(*, *, *) C:true(*, *, *) C:output(*, *, *) C:output(*, *, *)
test0.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test1.stdout:s0->s1: C:true(*, *, *) C:true(*, *, *) C:output(*, *, *) C:output(*, *, *)
test1.stdout:s1->s1: C:anti(+, 0, 0) C:output(+, 0, 0)
test2.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test2.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test2.stdout:s0->s1: C:true(*, 0, *) C:true(*, 0, *) C:output(*, 0, *) C:output(*, 0, *)
test2.stdout:s1->s1: C:anti(+, 0, 0) C:output(+, 0, 0)
test3.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test3.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test3.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test3.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_distribute.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_distribute.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_fuse.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_fuse.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_known_2.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_known_2.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_known.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_known.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_original.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_original.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_original.stdout:s2->s1: C:true(0, 0, *) C:true(0, 0, *) C:output(0, 0, *) C:output(0, 0, *)
test_original.stdout:s2->s3: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_original.stdout:s2->s4: C:true(0, 0, *) C:true(0, 0, *) C:output(0, 0, *) C:output(0, 0, *)
test_original.stdout:s2->s5: C:true(0, 0, *) C:true(0, 0, *) C:output(0, 0, *) C:output(0, 0, *)
test_original.stdout:s2->s6: C:true(0, 0, *) C:true(0, 0, *) C:output(0, 0, *) C:output(0, 0, *)
test_original.stdout:s3->s1: C:anti(0, 0, *) C:output(0, 0, *)
test_original.stdout:s3->s3: C:anti(0, 0, +) C:output(0, 0, +)
test_original.stdout:s3->s4: C:anti(0, 0, *) C:output(0, 0, *)
test_original.stdout:s3->s5: C:anti(0, 0, *) C:output(0, 0, *)
test_original.stdout:s3->s6: C:anti(0, 0, *) C:output(0, 0, *)
test_original.stdout:s4->s1: C:anti(0, 0, *) C:output(0, 0, *)
test_original.stdout:s4->s4: C:anti(0, 0, +) C:output(0, 0, +)
test_original.stdout:s4->s5: C:anti(0, 0, *) C:output(0, 0, *)
test_original.stdout:s4->s6: C:anti(0, 0, *) C:output(0, 0, *)
test_original.stdout:s5->s1: C:anti(0, 0, *) C:output(0, 0, *)
test_original.stdout:s5->s5: C:anti(0, 0, +) C:output(0, 0, +)
test_original.stdout:s5->s6: C:anti(0, 0, *) C:output(0, 0, *)
test_original.stdout:s6->s1: C:anti(0, 0, *) C:output(0, 0, *)
test_original.stdout:s6->s6: C:anti(0, 0, +) C:output(0, 0, +)
test_peel.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_peel.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_peel.stdout:s2->s1: C:true(0, 0, *) C:true(0, 0, *) C:output(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s2->s3: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_peel.stdout:s2->s4: C:true(0, 0, *) C:true(0, 0, *) C:output(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s2->s5: C:true(0, 0, *) C:true(0, 0, *) C:output(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s2->s6: C:true(0, 0, *) C:true(0, 0, *) C:output(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s3->s1: C:anti(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s3->s3: C:anti(0, 0, +) C:output(0, 0, +)
test_peel.stdout:s3->s4: C:anti(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s3->s5: C:anti(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s3->s6: C:anti(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s4->s1: C:anti(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s4->s4: C:anti(0, 0, +) C:output(0, 0, +)
test_peel.stdout:s4->s5: C:anti(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s4->s6: C:anti(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s5->s1: C:anti(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s5->s5: C:anti(0, 0, +) C:output(0, 0, +)
test_peel.stdout:s5->s6: C:anti(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s6->s1: C:anti(0, 0, *) C:output(0, 0, *)
test_peel.stdout:s6->s6: C:anti(0, 0, +) C:output(0, 0, +)
test_permute.stdout:s0->s1: C:true(+, 0, 0) C:true(0, 0, 0) C:output(+, 0, 0) C:output(0, 0, 0)
test_permute.stdout:s1->s1: C:anti(+, 0, 0) C:output(+, 0, 0)
test_pragma.stdout:s0->s1: C:true(+, 0, 0) C:true(0, 0, 0) C:output(+, 0, 0) C:output(0, 0, 0)
test_pragma.stdout:s1->s1: C:anti(+, 0, 0) C:output(+, 0, 0)
test_print_code.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_print_code.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_print_dep.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_print_dep.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_print_dep.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_print_dep.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_print_space.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_print_space.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_reverse.stdout:s0->s1: C:true(*, *, +) C:true(*, *, 0) C:output(*, *, +) C:output(*, *, 0)
test_reverse.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_scale.stdout:s0->s1: C:true(*, *, +) C:true(*, *, 0) C:output(*, *, +) C:output(*, *, 0)
test_scale.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_shift.stdout:s0->s1: C:true(4, 0, +) C:true(4, 0, 0) C:output(4, 0, +) C:output(4, 0, 0)
test_shift.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_shift_to.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_shift_to.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_skew.stdout:s0->s1: C:true(*, 0, +) C:true(*, 0, 0) C:output(*, 0, +) C:output(*, 0, 0)
test_skew.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test.stdout:s0->s1: C:true(+, 0, 0) C:true(0, 0, 0) C:output(+, 0, 0) C:output(0, 0, 0)
test.stdout:s1->s1: C:anti(+, 0, 0) C:output(+, 0, 0)
test_tile.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_tile.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_unroll_extra.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_unroll_extra.stdout:s0->s4: C:true(0, *, +) C:true(0, *, 0) C:output(0, *, +) C:output(0, *, 0)
test_unroll_extra.stdout:s1->s1: C:anti(0, 0, +) C:output(0, 0, +)
test_unroll_extra.stdout:s1->s4: C:anti(0, *, +) C:output(0, *, +)
test_unroll_extra.stdout:s2->s0: control()
test_unroll_extra.stdout:s2->s1: control()
test_unroll_extra.stdout:s2->s2: output(+, *, *)
test_unroll_extra.stdout:s2->s3: control()
test_unroll_extra.stdout:s2->s4: control()
test_unroll_extra.stdout:s2->s5: control()
test_unroll_extra.stdout:s2->s6: control()
test_unroll_extra.stdout:s2->s7: control()
test_unroll_extra.stdout:s2->s8: control()
test_unroll_extra.stdout:s2->s9: control()
test_unroll_extra.stdout:s2->s10: control()
test_unroll_extra.stdout:s3->s4: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_unroll_extra.stdout:s4->s4: C:anti(0, 0, +) C:output(0, 0, +)
test_unroll_extra.stdout:s5->s4: C:true(0, *, +) C:true(0, *, 0) C:output(0, *, +) C:output(0, *, 0)
test_unroll_extra.stdout:s5->s6: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_unroll_extra.stdout:s6->s4: C:anti(0, *, +) C:output(0, *, +)
test_unroll_extra.stdout:s6->s6: C:anti(0, 0, +) C:output(0, 0, +)
test_unroll_extra.stdout:s7->s4: C:true(0, *, +) C:true(0, *, 0) C:output(0, *, +) C:output(0, *, 0)
test_unroll_extra.stdout:s7->s8: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_unroll_extra.stdout:s8->s4: C:anti(0, *, +) C:output(0, *, +)
test_unroll_extra.stdout:s8->s8: C:anti(0, 0, +) C:output(0, 0, +)
test_unroll_extra.stdout:s9->s4: C:true(0, *, +) C:true(0, *, 0) C:output(0, *, +) C:output(0, *, 0)
test_unroll_extra.stdout:s9->s10: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_unroll_extra.stdout:s10->s4: C:anti(0, *, +) C:output(0, *, +)
test_unroll_extra.stdout:s10->s10: C:anti(0, 0, +) C:output(0, 0, +)
test_unroll.stdout:s0->s1: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_unroll.stdout:s0->s3: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_unroll.stdout:s0->s4: C:true(0, 0, +) C:true(0, 0, 0) C:output(0, 0, +) C:output(0, 0, 0)
test_unroll.stdout:s1->s1: C:anti(0, 0, 4+) C:output(0, 0, 4+)
test_unroll.stdout:s1->s3: C:anti(0, 0, *) C:output(0, 0, *)
test_unroll.stdout:s1->s4: C:anti(0, 0, 0+) C:output(0, 0, 0+)
test_unroll.stdout:s2->s1: control()
test_unroll.stdout:s2->s2: output(+, 0, *) output(0, +, *)
test_unroll.stdout:s2->s3: control()
test_unroll.stdout:s2->s4: control()
test_unroll.stdout:s3->s3: C:anti(0, 0, +) C:output(0, 0, +)
test_unroll.stdout:s4->s1: C:anti(0, 0, 4+) C:output(0, 0, 4+)
test_unroll.stdout:s4->s3: C:anti(0, 0, *) C:output(0, 0, *)
test_unroll.stdout:s4->s4: C:anti(0, 0, 0+) C:output(0, 0, 0+)
vm.stdout:s0->s1: s:output(+, 0) s:output(0, 0) s:true(+, 0) s:true(0, 0)
vm.stdout:s0->s2: s:true(+, 0) s:true(0, 0)
vm.stdout:s1->s1: s:output(+, 0) s:true(+, 0) s:true(0, 0) s:anti(+, 0)
vm.stdout:s1->s2: s:true(+, 0)
vm.stdout:s2->s1: b:true(1, 2+)
vm.stdout:s2->s2: b:true(0, 0)
vm.stdout:s0->s1: s:output(+, 0) s:output(0, 0) s:true(+, 0) s:true(0, 0)
vm.stdout:s0->s2: s:true(+, 0) s:true(0, 0)
vm.stdout:s1->s1: s:output(+, 0) s:true(+, 0) s:true(0, 0) s:anti(+, 0)
vm.stdout:s1->s2: s:true(+, 0)
vm.stdout:s2->s1: b:true(1, 2+)
vm.stdout:s2->s2: b:true(0, 0)
