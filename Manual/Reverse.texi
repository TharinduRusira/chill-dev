@c Reverse
@deftypefn {Transform} @code{reverse} {} (set @var{stmts}, int @var{level})
The @code{reverse} transformation @dots{}

@b{Arguments}

@c The reverse command has the form:
@c reverse (vector, number)
@c The reverse command @dots{}
@c reverse         [set of statement numbers]
@c                 loop level
@c                   shortcut to "scale([...],level,-1)"

@sp 2
@b{Conditions}

@sp 1

@c Example description and python script
@b{Example}
@multitable @columnfractions .50 .50 
The Python script to the right does @dots{}
@tab @b{Python script}
@smallformat
@cartouche
@c Script in verbatim block below
@verbatim
from chill import *

source('mm.c')
procedure('mm')
loop(0)

known(['ambn > 0', 'an > 0', 'bm > 0'])
distribute([0,1],1)
reverse([1],1)
reverse([1],2)
print_code()
@end verbatim
@end cartouche
@end smallformat
@end multitable

@c Code Transformation Example
@multitable @columnfractions .45 .50 .05
@b{Original code}
@smallformat
@cartouche
@c Original Code in verbatim block below
@verbatim
void mm(float **A, float **B, float **C, 
        int ambn, int an, int bm) {
  int i, j, n;

  for(i = 0; i < an; i++) 
    for(j = 0; j < bm; j++) {
      C[i][j] = 0.0f;
      for(n = 0; n < ambn; n++)
        C[i][j] += A[i][n] * B[n][j];
    }
}
@end verbatim
@end cartouche
@end smallformat

@tab 
@b{Transformed code}
@smallformat
@cartouche
@c Transformed Code in verbatim block below
@verbatim
void mm(float **A, float **B, float **C, 
        int ambn, int an, int bm) {
  int i, j, n;

  for (i = 0; i <= an - 1; i += 1) 
    for (j = 0; j <= bm - 1; j += 1) 
      C[i][j] = 0.0f;
  for (i = -an + 1; i <= 0; i += 1) 
    for (j = -bm + 1; j <= 0; j += 1) 
      for (n = 0; n <= ambn - 1; n += 1) 
        C[-i][-j] += (A[-i][n] * B[n][-j]);
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

@end deftypefn

